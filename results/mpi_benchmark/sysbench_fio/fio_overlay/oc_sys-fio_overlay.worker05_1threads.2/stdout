sysbench 1.0.17 (using system LuaJIT 2.1.0-beta3)

128 files, 16384Kb each, 2048Mb total
Creating files for the test...
Extra file open flags: (none)
Creating file test_file.0
Creating file test_file.1
Creating file test_file.2
Creating file test_file.3
Creating file test_file.4
Creating file test_file.5
Creating file test_file.6
Creating file test_file.7
Creating file test_file.8
Creating file test_file.9
Creating file test_file.10
Creating file test_file.11
Creating file test_file.12
Creating file test_file.13
Creating file test_file.14
Creating file test_file.15
Creating file test_file.16
Creating file test_file.17
Creating file test_file.18
Creating file test_file.19
Creating file test_file.20
Creating file test_file.21
Creating file test_file.22
Creating file test_file.23
Creating file test_file.24
Creating file test_file.25
Creating file test_file.26
Creating file test_file.27
Creating file test_file.28
Creating file test_file.29
Creating file test_file.30
Creating file test_file.31
Creating file test_file.32
Creating file test_file.33
Creating file test_file.34
Creating file test_file.35
Creating file test_file.36
Creating file test_file.37
Creating file test_file.38
Creating file test_file.39
Creating file test_file.40
Creating file test_file.41
Creating file test_file.42
Creating file test_file.43
Creating file test_file.44
Creating file test_file.45
Creating file test_file.46
Creating file test_file.47
Creating file test_file.48
Creating file test_file.49
Creating file test_file.50
Creating file test_file.51
Creating file test_file.52
Creating file test_file.53
Creating file test_file.54
Creating file test_file.55
Creating file test_file.56
Creating file test_file.57
Creating file test_file.58
Creating file test_file.59
Creating file test_file.60
Creating file test_file.61
Creating file test_file.62
Creating file test_file.63
Creating file test_file.64
Creating file test_file.65
Creating file test_file.66
Creating file test_file.67
Creating file test_file.68
Creating file test_file.69
Creating file test_file.70
Creating file test_file.71
Creating file test_file.72
Creating file test_file.73
Creating file test_file.74
Creating file test_file.75
Creating file test_file.76
Creating file test_file.77
Creating file test_file.78
Creating file test_file.79
Creating file test_file.80
Creating file test_file.81
Creating file test_file.82
Creating file test_file.83
Creating file test_file.84
Creating file test_file.85
Creating file test_file.86
Creating file test_file.87
Creating file test_file.88
Creating file test_file.89
Creating file test_file.90
Creating file test_file.91
Creating file test_file.92
Creating file test_file.93
Creating file test_file.94
Creating file test_file.95
Creating file test_file.96
Creating file test_file.97
Creating file test_file.98
Creating file test_file.99
Creating file test_file.100
Creating file test_file.101
Creating file test_file.102
Creating file test_file.103
Creating file test_file.104
Creating file test_file.105
Creating file test_file.106
Creating file test_file.107
Creating file test_file.108
Creating file test_file.109
Creating file test_file.110
Creating file test_file.111
Creating file test_file.112
Creating file test_file.113
Creating file test_file.114
Creating file test_file.115
Creating file test_file.116
Creating file test_file.117
Creating file test_file.118
Creating file test_file.119
Creating file test_file.120
Creating file test_file.121
Creating file test_file.122
Creating file test_file.123
Creating file test_file.124
Creating file test_file.125
Creating file test_file.126
Creating file test_file.127
2147483648 bytes written in 11.19 seconds (183.09 MiB/sec).
sysbench 1.0.17 (using system LuaJIT 2.1.0-beta3)

Running the test with following options:
Number of threads: 1
Initializing random number generator from current time


Extra file open flags: (none)
128 files, 16MiB each
2GiB total file size
Block size 16KiB
Number of IO requests: 0
Read/Write ratio for combined random IO test: 1.50
Periodic FSYNC enabled, calling fsync() each 100 requests.
Calling fsync() at the end of test, Enabled.
Using synchronous I/O mode
Doing random write test
Initializing worker threads...

Threads started!


File operations:
    reads/s:                      0.00
    writes/s:                     9455.60
    fsyncs/s:                     12115.86

Throughput:
    read, MiB/s:                  0.00
    written, MiB/s:               147.74

General statistics:
    total time:                          10.0035s
    total number of events:              215687

Latency (ms):
         min:                                    0.00
         avg:                                    0.05
         max:                                    2.56
         95th percentile:                        0.15
         sum:                                 9947.94

Threads fairness:
    events (avg/stddev):           215687.0000/0.00
    execution time (avg/stddev):   9.9479/0.00

sysbench 1.0.17 (using system LuaJIT 2.1.0-beta3)

128 files, 16384Kb each, 2048Mb total
Creating files for the test...
Extra file open flags: (none)
Reusing existing file test_file.0
Reusing existing file test_file.1
Reusing existing file test_file.2
Reusing existing file test_file.3
Reusing existing file test_file.4
Reusing existing file test_file.5
Reusing existing file test_file.6
Reusing existing file test_file.7
Reusing existing file test_file.8
Reusing existing file test_file.9
Reusing existing file test_file.10
Reusing existing file test_file.11
Reusing existing file test_file.12
Reusing existing file test_file.13
Reusing existing file test_file.14
Reusing existing file test_file.15
Reusing existing file test_file.16
Reusing existing file test_file.17
Reusing existing file test_file.18
Reusing existing file test_file.19
Reusing existing file test_file.20
Reusing existing file test_file.21
Reusing existing file test_file.22
Reusing existing file test_file.23
Reusing existing file test_file.24
Reusing existing file test_file.25
Reusing existing file test_file.26
Reusing existing file test_file.27
Reusing existing file test_file.28
Reusing existing file test_file.29
Reusing existing file test_file.30
Reusing existing file test_file.31
Reusing existing file test_file.32
Reusing existing file test_file.33
Reusing existing file test_file.34
Reusing existing file test_file.35
Reusing existing file test_file.36
Reusing existing file test_file.37
Reusing existing file test_file.38
Reusing existing file test_file.39
Reusing existing file test_file.40
Reusing existing file test_file.41
Reusing existing file test_file.42
Reusing existing file test_file.43
Reusing existing file test_file.44
Reusing existing file test_file.45
Reusing existing file test_file.46
Reusing existing file test_file.47
Reusing existing file test_file.48
Reusing existing file test_file.49
Reusing existing file test_file.50
Reusing existing file test_file.51
Reusing existing file test_file.52
Reusing existing file test_file.53
Reusing existing file test_file.54
Reusing existing file test_file.55
Reusing existing file test_file.56
Reusing existing file test_file.57
Reusing existing file test_file.58
Reusing existing file test_file.59
Reusing existing file test_file.60
Reusing existing file test_file.61
Reusing existing file test_file.62
Reusing existing file test_file.63
Reusing existing file test_file.64
Reusing existing file test_file.65
Reusing existing file test_file.66
Reusing existing file test_file.67
Reusing existing file test_file.68
Reusing existing file test_file.69
Reusing existing file test_file.70
Reusing existing file test_file.71
Reusing existing file test_file.72
Reusing existing file test_file.73
Reusing existing file test_file.74
Reusing existing file test_file.75
Reusing existing file test_file.76
Reusing existing file test_file.77
Reusing existing file test_file.78
Reusing existing file test_file.79
Reusing existing file test_file.80
Reusing existing file test_file.81
Reusing existing file test_file.82
Reusing existing file test_file.83
Reusing existing file test_file.84
Reusing existing file test_file.85
Reusing existing file test_file.86
Reusing existing file test_file.87
Reusing existing file test_file.88
Reusing existing file test_file.89
Reusing existing file test_file.90
Reusing existing file test_file.91
Reusing existing file test_file.92
Reusing existing file test_file.93
Reusing existing file test_file.94
Reusing existing file test_file.95
Reusing existing file test_file.96
Reusing existing file test_file.97
Reusing existing file test_file.98
Reusing existing file test_file.99
Reusing existing file test_file.100
Reusing existing file test_file.101
Reusing existing file test_file.102
Reusing existing file test_file.103
Reusing existing file test_file.104
Reusing existing file test_file.105
Reusing existing file test_file.106
Reusing existing file test_file.107
Reusing existing file test_file.108
Reusing existing file test_file.109
Reusing existing file test_file.110
Reusing existing file test_file.111
Reusing existing file test_file.112
Reusing existing file test_file.113
Reusing existing file test_file.114
Reusing existing file test_file.115
Reusing existing file test_file.116
Reusing existing file test_file.117
Reusing existing file test_file.118
Reusing existing file test_file.119
Reusing existing file test_file.120
Reusing existing file test_file.121
Reusing existing file test_file.122
Reusing existing file test_file.123
Reusing existing file test_file.124
Reusing existing file test_file.125
Reusing existing file test_file.126
Reusing existing file test_file.127
No bytes written.
sysbench 1.0.17 (using system LuaJIT 2.1.0-beta3)

Running the test with following options:
Number of threads: 1
Initializing random number generator from current time


Extra file open flags: (none)
128 files, 16MiB each
2GiB total file size
Block size 16KiB
Number of IO requests: 0
Read/Write ratio for combined random IO test: 1.50
Periodic FSYNC enabled, calling fsync() each 100 requests.
Calling fsync() at the end of test, Enabled.
Using synchronous I/O mode
Doing random read test
Initializing worker threads...

Threads started!


File operations:
    reads/s:                      469563.58
    writes/s:                     0.00
    fsyncs/s:                     0.00

Throughput:
    read, MiB/s:                  7336.93
    written, MiB/s:               0.00

General statistics:
    total time:                          10.0000s
    total number of events:              4696199

Latency (ms):
         min:                                    0.00
         avg:                                    0.00
         max:                                    0.04
         95th percentile:                        0.00
         sum:                                 9309.17

Threads fairness:
    events (avg/stddev):           4696199.0000/0.00
    execution time (avg/stddev):   9.3092/0.00

